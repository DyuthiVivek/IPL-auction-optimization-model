from pyscipopt import Model
import pandas as pd

model = Model()

x0 = model.addVar("x0", vtype="BINARY")
x1 = model.addVar("x1", vtype="BINARY")
x2 = model.addVar("x2", vtype="BINARY")
x3 = model.addVar("x3", vtype="BINARY")
x4 = model.addVar("x4", vtype="BINARY")
x5 = model.addVar("x5", vtype="BINARY")
x6 = model.addVar("x6", vtype="BINARY")
x7 = model.addVar("x7", vtype="BINARY")
x8 = model.addVar("x8", vtype="BINARY")
x9 = model.addVar("x9", vtype="BINARY")
x10 = model.addVar("x10", vtype="BINARY")
x11 = model.addVar("x11", vtype="BINARY")
x12 = model.addVar("x12", vtype="BINARY")
x13 = model.addVar("x13", vtype="BINARY")
x14 = model.addVar("x14", vtype="BINARY")
x15 = model.addVar("x15", vtype="BINARY")
x16 = model.addVar("x16", vtype="BINARY")
x17 = model.addVar("x17", vtype="BINARY")
x18 = model.addVar("x18", vtype="BINARY")
x19 = model.addVar("x19", vtype="BINARY")
x20 = model.addVar("x20", vtype="BINARY")
x21 = model.addVar("x21", vtype="BINARY")
x22 = model.addVar("x22", vtype="BINARY")
x23 = model.addVar("x23", vtype="BINARY")
x24 = model.addVar("x24", vtype="BINARY")
x25 = model.addVar("x25", vtype="BINARY")
x26 = model.addVar("x26", vtype="BINARY")
x27 = model.addVar("x27", vtype="BINARY")
x28 = model.addVar("x28", vtype="BINARY")
x29 = model.addVar("x29", vtype="BINARY")
x30 = model.addVar("x30", vtype="BINARY")
x31 = model.addVar("x31", vtype="BINARY")
x32 = model.addVar("x32", vtype="BINARY")
x33 = model.addVar("x33", vtype="BINARY")
x34 = model.addVar("x34", vtype="BINARY")
x35 = model.addVar("x35", vtype="BINARY")
x36 = model.addVar("x36", vtype="BINARY")
x37 = model.addVar("x37", vtype="BINARY")
x38 = model.addVar("x38", vtype="BINARY")
x39 = model.addVar("x39", vtype="BINARY")
x40 = model.addVar("x40", vtype="BINARY")
x41 = model.addVar("x41", vtype="BINARY")
x42 = model.addVar("x42", vtype="BINARY")
x43 = model.addVar("x43", vtype="BINARY")
x44 = model.addVar("x44", vtype="BINARY")
x45 = model.addVar("x45", vtype="BINARY")
x46 = model.addVar("x46", vtype="BINARY")
x47 = model.addVar("x47", vtype="BINARY")
x48 = model.addVar("x48", vtype="BINARY")
x49 = model.addVar("x49", vtype="BINARY")
x50 = model.addVar("x50", vtype="BINARY")
x51 = model.addVar("x51", vtype="BINARY")
x52 = model.addVar("x52", vtype="BINARY")
x53 = model.addVar("x53", vtype="BINARY")
x54 = model.addVar("x54", vtype="BINARY")
x55 = model.addVar("x55", vtype="BINARY")
x56 = model.addVar("x56", vtype="BINARY")
x57 = model.addVar("x57", vtype="BINARY")
x58 = model.addVar("x58", vtype="BINARY")
x59 = model.addVar("x59", vtype="BINARY")
x60 = model.addVar("x60", vtype="BINARY")
x61 = model.addVar("x61", vtype="BINARY")
x62 = model.addVar("x62", vtype="BINARY")
x63 = model.addVar("x63", vtype="BINARY")
x64 = model.addVar("x64", vtype="BINARY")
x65 = model.addVar("x65", vtype="BINARY")
x66 = model.addVar("x66", vtype="BINARY")
x67 = model.addVar("x67", vtype="BINARY")
x68 = model.addVar("x68", vtype="BINARY")
x69 = model.addVar("x69", vtype="BINARY")
x70 = model.addVar("x70", vtype="BINARY")
x71 = model.addVar("x71", vtype="BINARY")
x72 = model.addVar("x72", vtype="BINARY")
x73 = model.addVar("x73", vtype="BINARY")
x74 = model.addVar("x74", vtype="BINARY")
x75 = model.addVar("x75", vtype="BINARY")
x76 = model.addVar("x76", vtype="BINARY")
x77 = model.addVar("x77", vtype="BINARY")
x78 = model.addVar("x78", vtype="BINARY")
x79 = model.addVar("x79", vtype="BINARY")
x80 = model.addVar("x80", vtype="BINARY")
x81 = model.addVar("x81", vtype="BINARY")
x82 = model.addVar("x82", vtype="BINARY")
x83 = model.addVar("x83", vtype="BINARY")
x84 = model.addVar("x84", vtype="BINARY")
x85 = model.addVar("x85", vtype="BINARY")
x86 = model.addVar("x86", vtype="BINARY")
x87 = model.addVar("x87", vtype="BINARY")
x88 = model.addVar("x88", vtype="BINARY")
x89 = model.addVar("x89", vtype="BINARY")
x90 = model.addVar("x90", vtype="BINARY")
x91 = model.addVar("x91", vtype="BINARY")
x92 = model.addVar("x92", vtype="BINARY")
x93 = model.addVar("x93", vtype="BINARY")
x94 = model.addVar("x94", vtype="BINARY")
x95 = model.addVar("x95", vtype="BINARY")
x96 = model.addVar("x96", vtype="BINARY")
x97 = model.addVar("x97", vtype="BINARY")
x98 = model.addVar("x98", vtype="BINARY")
x99 = model.addVar("x99", vtype="BINARY")
x100 = model.addVar("x100", vtype="BINARY")
x101 = model.addVar("x101", vtype="BINARY")
x102 = model.addVar("x102", vtype="BINARY")
x103 = model.addVar("x103", vtype="BINARY")
x104 = model.addVar("x104", vtype="BINARY")
x105 = model.addVar("x105", vtype="BINARY")
x106 = model.addVar("x106", vtype="BINARY")
x107 = model.addVar("x107", vtype="BINARY")
x108 = model.addVar("x108", vtype="BINARY")
x109 = model.addVar("x109", vtype="BINARY")
x110 = model.addVar("x110", vtype="BINARY")
x111 = model.addVar("x111", vtype="BINARY")
x112 = model.addVar("x112", vtype="BINARY")
x113 = model.addVar("x113", vtype="BINARY")
x114 = model.addVar("x114", vtype="BINARY")
x115 = model.addVar("x115", vtype="BINARY")
x116 = model.addVar("x116", vtype="BINARY")
x117 = model.addVar("x117", vtype="BINARY")
x118 = model.addVar("x118", vtype="BINARY")
x119 = model.addVar("x119", vtype="BINARY")
x120 = model.addVar("x120", vtype="BINARY")
x121 = model.addVar("x121", vtype="BINARY")
x122 = model.addVar("x122", vtype="BINARY")
x123 = model.addVar("x123", vtype="BINARY")
x124 = model.addVar("x124", vtype="BINARY")
x125 = model.addVar("x125", vtype="BINARY")
x126 = model.addVar("x126", vtype="BINARY")
x127 = model.addVar("x127", vtype="BINARY")
x128 = model.addVar("x128", vtype="BINARY")
x129 = model.addVar("x129", vtype="BINARY")
x130 = model.addVar("x130", vtype="BINARY")
x131 = model.addVar("x131", vtype="BINARY")
x132 = model.addVar("x132", vtype="BINARY")
x133 = model.addVar("x133", vtype="BINARY")
x134 = model.addVar("x134", vtype="BINARY")
x135 = model.addVar("x135", vtype="BINARY")
x136 = model.addVar("x136", vtype="BINARY")
x137 = model.addVar("x137", vtype="BINARY")
x138 = model.addVar("x138", vtype="BINARY")
x139 = model.addVar("x139", vtype="BINARY")
x140 = model.addVar("x140", vtype="BINARY")
x141 = model.addVar("x141", vtype="BINARY")
x142 = model.addVar("x142", vtype="BINARY")
x143 = model.addVar("x143", vtype="BINARY")
x144 = model.addVar("x144", vtype="BINARY")
x145 = model.addVar("x145", vtype="BINARY")
x146 = model.addVar("x146", vtype="BINARY")
x147 = model.addVar("x147", vtype="BINARY")
x148 = model.addVar("x148", vtype="BINARY")
x149 = model.addVar("x149", vtype="BINARY")
x150 = model.addVar("x150", vtype="BINARY")
x151 = model.addVar("x151", vtype="BINARY")
x152 = model.addVar("x152", vtype="BINARY")
x153 = model.addVar("x153", vtype="BINARY")
x154 = model.addVar("x154", vtype="BINARY")
x155 = model.addVar("x155", vtype="BINARY")
x156 = model.addVar("x156", vtype="BINARY")
x157 = model.addVar("x157", vtype="BINARY")
x158 = model.addVar("x158", vtype="BINARY")
x159 = model.addVar("x159", vtype="BINARY")
x160 = model.addVar("x160", vtype="BINARY")
x161 = model.addVar("x161", vtype="BINARY")
x162 = model.addVar("x162", vtype="BINARY")
x163 = model.addVar("x163", vtype="BINARY")
x164 = model.addVar("x164", vtype="BINARY")
x165 = model.addVar("x165", vtype="BINARY")
x166 = model.addVar("x166", vtype="BINARY")
x167 = model.addVar("x167", vtype="BINARY")
x168 = model.addVar("x168", vtype="BINARY")
x169 = model.addVar("x169", vtype="BINARY")
x170 = model.addVar("x170", vtype="BINARY")
x171 = model.addVar("x171", vtype="BINARY")
x172 = model.addVar("x172", vtype="BINARY")
x173 = model.addVar("x173", vtype="BINARY")
x174 = model.addVar("x174", vtype="BINARY")
x175 = model.addVar("x175", vtype="BINARY")
x176 = model.addVar("x176", vtype="BINARY")
x177 = model.addVar("x177", vtype="BINARY")
x178 = model.addVar("x178", vtype="BINARY")
x179 = model.addVar("x179", vtype="BINARY")
x180 = model.addVar("x180", vtype="BINARY")
x181 = model.addVar("x181", vtype="BINARY")
x182 = model.addVar("x182", vtype="BINARY")
x183 = model.addVar("x183", vtype="BINARY")
x184 = model.addVar("x184", vtype="BINARY")
x185 = model.addVar("x185", vtype="BINARY")
x186 = model.addVar("x186", vtype="BINARY")
x187 = model.addVar("x187", vtype="BINARY")
x188 = model.addVar("x188", vtype="BINARY")
x189 = model.addVar("x189", vtype="BINARY")
x190 = model.addVar("x190", vtype="BINARY")
x191 = model.addVar("x191", vtype="BINARY")
x192 = model.addVar("x192", vtype="BINARY")
x193 = model.addVar("x193", vtype="BINARY")
x194 = model.addVar("x194", vtype="BINARY")
x195 = model.addVar("x195", vtype="BINARY")
x196 = model.addVar("x196", vtype="BINARY")
x197 = model.addVar("x197", vtype="BINARY")
x198 = model.addVar("x198", vtype="BINARY")
x199 = model.addVar("x199", vtype="BINARY")
x200 = model.addVar("x200", vtype="BINARY")
x201 = model.addVar("x201", vtype="BINARY")
x202 = model.addVar("x202", vtype="BINARY")
x203 = model.addVar("x203", vtype="BINARY")
x204 = model.addVar("x204", vtype="BINARY")
x205 = model.addVar("x205", vtype="BINARY")
x206 = model.addVar("x206", vtype="BINARY")
x207 = model.addVar("x207", vtype="BINARY")
x208 = model.addVar("x208", vtype="BINARY")
x209 = model.addVar("x209", vtype="BINARY")
x210 = model.addVar("x210", vtype="BINARY")
x211 = model.addVar("x211", vtype="BINARY")
x212 = model.addVar("x212", vtype="BINARY")
x213 = model.addVar("x213", vtype="BINARY")
x214 = model.addVar("x214", vtype="BINARY")
x215 = model.addVar("x215", vtype="BINARY")
x216 = model.addVar("x216", vtype="BINARY")
x217 = model.addVar("x217", vtype="BINARY")
x218 = model.addVar("x218", vtype="BINARY")
x219 = model.addVar("x219", vtype="BINARY")
x220 = model.addVar("x220", vtype="BINARY")
x221 = model.addVar("x221", vtype="BINARY")
x222 = model.addVar("x222", vtype="BINARY")
x223 = model.addVar("x223", vtype="BINARY")
x224 = model.addVar("x224", vtype="BINARY")
x225 = model.addVar("x225", vtype="BINARY")
x226 = model.addVar("x226", vtype="BINARY")
x227 = model.addVar("x227", vtype="BINARY")
x228 = model.addVar("x228", vtype="BINARY")
x229 = model.addVar("x229", vtype="BINARY")
x230 = model.addVar("x230", vtype="BINARY")
x231 = model.addVar("x231", vtype="BINARY")
x232 = model.addVar("x232", vtype="BINARY")
x233 = model.addVar("x233", vtype="BINARY")
x234 = model.addVar("x234", vtype="BINARY")
x235 = model.addVar("x235", vtype="BINARY")
x236 = model.addVar("x236", vtype="BINARY")
x237 = model.addVar("x237", vtype="BINARY")
x238 = model.addVar("x238", vtype="BINARY")
x239 = model.addVar("x239", vtype="BINARY")
x240 = model.addVar("x240", vtype="BINARY")
x241 = model.addVar("x241", vtype="BINARY")
x242 = model.addVar("x242", vtype="BINARY")
x243 = model.addVar("x243", vtype="BINARY")

r0 = model.addVar("r0", vtype="BINARY")
r1 = model.addVar("r1", vtype="BINARY")
r2 = model.addVar("r2", vtype="BINARY")
r3 = model.addVar("r3", vtype="BINARY")
r4 = model.addVar("r4", vtype="BINARY")
r5 = model.addVar("r5", vtype="BINARY")
r6 = model.addVar("r6", vtype="BINARY")
r7 = model.addVar("r7", vtype="BINARY")
r8 = model.addVar("r8", vtype="BINARY")
r9 = model.addVar("r9", vtype="BINARY")
r10 = model.addVar("r10", vtype="BINARY")
r11 = model.addVar("r11", vtype="BINARY")
r12 = model.addVar("r12", vtype="BINARY")
r13 = model.addVar("r13", vtype="BINARY")
r14 = model.addVar("r14", vtype="BINARY")
r15 = model.addVar("r15", vtype="BINARY")
r16 = model.addVar("r16", vtype="BINARY")
r17 = model.addVar("r17", vtype="BINARY")
r18 = model.addVar("r18", vtype="BINARY")
r19 = model.addVar("r19", vtype="BINARY")
r20 = model.addVar("r20", vtype="BINARY")
r21 = model.addVar("r21", vtype="BINARY")
r22 = model.addVar("r22", vtype="BINARY")

v1 = model.addVar("v1", vtype="CONTINUOUS")
v2 = model.addVar("v2", vtype="CONTINUOUS")
v3 = model.addVar("v3", vtype="CONTINUOUS")
rsum = model.addVar("rsum", vtype="CONTINUOUS")

b1 = model.addVar("b1", vtype="CONTINUOUS")
b2 = model.addVar("b2", vtype="CONTINUOUS")
b3 = model.addVar("b3", vtype="CONTINUOUS")
b4 = model.addVar("b4", vtype="CONTINUOUS")
b5 = model.addVar("b5", vtype="CONTINUOUS")
b6 = model.addVar("b6", vtype="CONTINUOUS")
b7 = model.addVar("b7", vtype="CONTINUOUS")

u1 = model.addVar("u1", vtype="CONTINUOUS")
u2 = model.addVar("u2", vtype="CONTINUOUS")
u3 = model.addVar("u3", vtype="CONTINUOUS")

pmean = model.addVar("pmean", vtype="CONTINUOUS")

p1 = model.addVar("p1", vtype="CONTINUOUS")
p2 = model.addVar("p2", vtype="CONTINUOUS")
p3 = model.addVar("p3", vtype="CONTINUOUS")

variance = model.addVar("variance", vtype="CONTINUOUS")

capped = model.addVar("capped", vtype="CONTINUOUS")
uncapped = model.addVar("uncapped", vtype="CONTINUOUS")

z1 = model.addVar("z1", vtype="BINARY")
z2 = model.addVar("z2", vtype="BINARY")
z3 = model.addVar("z3", vtype="BINARY")
z4 = model.addVar("z4", vtype="BINARY")
z5 = model.addVar("z5", vtype="BINARY")

# Minimum and maximum number of players constraint
model.addCons(x0 + x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10 + x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 + x20 + x21 + x22 + x23 + x24 + x25 + x26 + x27 + x28 + x29 + x30 + x31 + x32 + x33 + x34 + x35 + x36 + x37 + x38 + x39 + x40 + x41 + x42 + x43 + x44 + x45 + x46 + x47 + x48 + x49 + x50 + x51 + x52 + x53 + x54 + x55 + x56 + x57 + x58 + x59 + x60 + x61 + x62 + x63 + x64 + x65 + x66 + x67 + x68 + x69 + x70 + x71 + x72 + x73 + x74 + x75 + x76 + x77 + x78 + x79 + x80 + x81 + x82 + x83 + x84 + x85 + x86 + x87 + x88 + x89 + x90 + x91 + x92 + x93 + x94 + x95 + x96 + x97 + x98 + x99 == v1)
model.addCons(x100 + x101 + x102 + x103 + x104 + x105 + x106 + x107 + x108 + x109 + x110 + x111 + x112 + x113 + x114 + x115 + x116 + x117 + x118 + x119 + x120 + x121 + x122 + x123 + x124 + x125 + x126 + x127 + x128 + x129 + x130 + x131 + x132 + x133 + x134 + x135 + x136 + x137 + x138 + x139 + x140 + x141 + x142 + x143 + x144 + x145 + x146 + x147 + x148 + x149 + x150 + x151 + x152 + x153 + x154 + x155 + x156 + x157 + x158 + x159 + x160 + x161 + x162 + x163 + x164 + x165 + x166 + x167 + x168 + x169 + x170 + x171 + x172 + x173 + x174 + x175 + x176 + x177 + x178 + x179 + x180 + x181 + x182 + x183 + x184 + x185 + x186 + x187 + x188 + x189 + x190 + x191 + x192 + x193 + x194 + x195 + x196 + x197 + x198 + x199 == v2)
model.addCons(x200 + x201 + x202 + x203 + x204 + x205 + x206 + x207 + x208 + x209 + x210 + x211 + x212 + x213 + x214 + x215 + x216 + x217 + x218 + x219 + x220 + x221 + x222 + x223 + x224 + x225 + x226 + x227 + x228 + x229 + x230 + x231 + x232 + x233 + x234 + x235 + x236 + x237 + x238 + x239 + x240 + x241 + x242 + x243 == v3)
model.addCons(r0 + r1 + r2 + r3 + r4 + r5 + r6 + r7 + r8 + r9 + r10 + r11 + r12 + r13 + r14 + r15 + r16 + r17 + r18 + r19 + r20 + r21 + r22 == rsum)

model.addCons(v1 + v2 + v3 + rsum <= 25)
model.addCons(v1 + v2 + v3 + rsum >= 18)

# Maximum number of retained players
model.addCons(rsum <= 6)

# Maximum number of uncapped players that can be retained
model.addCons(r1 + r2 + r4 + r5 + r6 + r7 + r10 + r11 + r14 == uncapped)
model.addCons(uncapped <= 2)

# Maximum number of capped players that can be retained
model.addCons(r0 + r3 + r8 + r9 + r12 + r13 + r15 + r16 + r17 + r18 + r19 + r20 + r21 + r22 == capped)
model.addCons(capped <= 5)

# Maximum number of overseas players
model.addCons(x2 + x3 + x6 + x7 + x20 + x23 + x25 + x26 + x27 + x28 + x32 + x33 + x36 + x37 + x38 + x39 + x40 + x41 + x42 + x49 + x50 + x51 + x52 + x56 + x61 + x70 + x72 + x73 + x74 + x75 + x79 + x80 + x82 + x83 + x89 + x92 + x93 + x95 + x96 + x97 + x98 + x99 + x107 + x115 + x116 + x120 + x121 + x128 + x130 + x141 + x142 + x143 + x144 + x146 + x158 + x159 + x160 + x162 + x163 + x165 + x166 + x167 + x168 + x170 + x171 + x172 + x173 + x174 + x175 + x176 + x177 + x178 + x179 + x180 + x181 + x183 + x184 + x185 + x186 + x187 + x189 + x190 + x192 + x194 + x197 + x198 + x201 + x202 + x204 + x205 + x206 + x207 + x208 + x209 + x210 + x222 + x229 + x231 + x234 + x235 + x242 + x243 + r2 + r3 + r7 + r8 + r9 + r12 + r16 + r20 + r21 + r22 <= 8)

# Cost constraints
model.addCons(26000000 * x0 + 65000000 * x1 + 19000000 * x2 + 26000000 * x3 + 10000000 * x4 + 2000000 * x5 + 15000000 * x6 + 24000000 * x7 + 67500000 * x8 + 5000000 * x9 + 2000000 * x10 + 2000000 * x11 + 34000000 * x12 + 2000000 * x13 + 3000000 * x14 + 2000000 * x15 + 100000000 * x16 + 2000000 * x17 + 2000000 * x18 + 3000000 * x19 + 5000000 * x20 + 42000000 * x21 + 42000000 * x22 + 36000000 * x23 + 2000000 * x24 + 7500000 * x25 + 30000000 * x26 + 62500000 * x27 + 20000000 * x28 + 140000000 * x29 + 57500000 * x30 + 77500000 * x31 + 10000000 * x32 + 30000000 * x33 + 2000000 * x34 + 55000000 * x35 + 20000000 * x36 + 44000000 * x37 + 20000000 * x38 + 7500000 * x39 + 70000000 * x40 + 5000000 * x41 + 15000000 * x42 + 5000000 * x43 + 38000000 * x44 + 107500000 * x45 + 2000000 * x46 + 152500000 * x47 + 2000000 * x48 + 15000000 * x49 + 7500000 * x50 + 87500000 * x51 + 20000000 * x52 + 17000000 * x53 + 13000000 * x54 + 2000000 * x55 + 77500000 * x56 + 9000000 * x57 + 3000000 * x58 + 2000000 * x59 + 20000000 * x60 + 92500000 * x61 + 11000000 * x62 + 2000000 * x63 + 40000000 * x64 + 14000000 * x65 + 20000000 * x66 + 20000000 * x67 + 2000000 * x68 + 2000000 * x69 + 5000000 * x70 + 6500000 * x71 + 115000000 * x72 + 100000000 * x73 + 5000000 * x74 + 7000000 * x75 + 9500000 * x76 + 2000000 * x77 + 11000000 * x78 + 42000000 * x79 + 24000000 * x80 + 6500000 * x81 + 19000000 * x82 + 10000000 * x83 + 62500000 * x84 + 2000000 * x85 + 2000000 * x86 + 2000000 * x87 + 16000000 * x88 + 20000000 * x89 + 2000000 * x90 + 17000000 * x91 + 20000000 * x92 + 7500000 * x93 + 26000000 * x94 + 107500000 * x95 + 3000000 * x96 + 7500000 * x97 + 60000000 * x98 + 72500000 * x99 == u1)
model.addCons(6000000 * x100 + 2000000 * x101 + 12000000 * x102 + 100000000 * x103 + 5000000 * x104 + 2000000 * x105 + 2000000 * x106 + 67500000 * x107 + 30000000 * x108 + 52500000 * x109 + 90000000 * x110 + 85000000 * x111 + 15000000 * x112 + 2000000 * x113 + 2000000 * x114 + 10000000 * x115 + 10000000 * x116 + 5500000 * x117 + 38000000 * x118 + 20000000 * x119 + 77500000 * x120 + 20000000 * x121 + 5000000 * x122 + 24000000 * x123 + 5000000 * x124 + 107500000 * x125 + 2000000 * x126 + 6000000 * x127 + 10000000 * x128 + 82500000 * x129 + 85000000 * x130 + 40000000 * x131 + 72500000 * x132 + 7500000 * x133 + 122500000 * x134 + 7500000 * x135 + 2000000 * x136 + 3000000 * x137 + 52500000 * x138 + 40000000 * x139 + 2000000 * x140 + 82500000 * x141 + 5000000 * x142 + 15000000 * x143 + 80000000 * x144 + 2000000 * x145 + 15000000 * x146 + 20000000 * x147 + 20000000 * x148 + 5000000 * x149 + 14000000 * x150 + 5000000 * x151 + 87500000 * x152 + 19000000 * x153 + 32000000 * x154 + 5000000 * x155 + 65000000 * x156 + 20000000 * x157 + 20000000 * x158 + 20000000 * x159 + 20000000 * x160 + 15000000 * x161 + 15000000 * x162 + 15000000 * x163 + 15000000 * x164 + 15000000 * x165 + 15000000 * x166 + 15000000 * x167 + 15000000 * x168 + 10000000 * x169 + 10000000 * x170 + 10000000 * x171 + 10000000 * x172 + 10000000 * x173 + 10000000 * x174 + 7500000 * x175 + 7500000 * x176 + 7500000 * x177 + 7500000 * x178 + 7500000 * x179 + 7500000 * x180 + 7500000 * x181 + 5000000 * x182 + 5000000 * x183 + 5000000 * x184 + 5000000 * x185 + 5000000 * x186 + 5000000 * x187 + 5000000 * x188 + 5000000 * x189 + 5000000 * x190 + 5000000 * x191 + 5000000 * x192 + 5000000 * x193 + 5000000 * x194 + 5000000 * x195 + 5000000 * x196 + 5000000 * x197 + 5000000 * x198 + 5000000 * x199 == u2)
model.addCons(5000000 * x200 + 5000000 * x201 + 5000000 * x202 + 5000000 * x203 + 5000000 * x204 + 5000000 * x205 + 5000000 * x206 + 5000000 * x207 + 4000000 * x208 + 4000000 * x209 + 4000000 * x210 + 2000000 * x211 + 2000000 * x212 + 2000000 * x213 + 2000000 * x214 + 2000000 * x215 + 2000000 * x216 + 2000000 * x217 + 2000000 * x218 + 2000000 * x219 + 2000000 * x220 + 2000000 * x221 + 2000000 * x222 + 2000000 * x223 + 2000000 * x224 + 2000000 * x225 + 2000000 * x226 + 2000000 * x227 + 2000000 * x228 + 2000000 * x229 + 2000000 * x230 + 2000000 * x231 + 2000000 * x232 + 2000000 * x233 + 2000000 * x234 + 2000000 * x235 + 2000000 * x236 + 2000000 * x237 + 2000000 * x238 + 2000000 * x239 + 2000000 * x240 + 2000000 * x241 + 2000000 * x242 + 2000000 * x243 == u3)

model.addCons(capped == 1 * z1 + 2 * z2 + 3 * z3 + 4 * z4 + 5 * z5)
model.addCons(z1 + z2 + z3 + z4 + z5 <= 1)

model.addCons(u1 + u2 + u3 + 40000000 * uncapped + 180000000 * z1 + 320000000 * z2 + 430000000 * z3 + 610000000 * z4 + 750000000 * z5 <= 900000000) # Max spending: 90 crores

# Total bowling score
model.addCons(0.0 * x0 + 3.080487248222165 * x1 + 4.91966432343327 * x2 + 0.718009030601105 * x3 + 0.0 * x4 + 2.137212169975576 * x5 + 0.0 * x6 + 2.828186618772914 * x7 + 0.0 * x8 + 2.9495687850998995 * x9 + 4.2405921773546185 * x10 + 0.0 * x11 + 0.0 * x12 + 3.508309944152109 * x13 + 2.869470280602835 * x14 + 0.0 * x15 + 3.618683196434755 * x16 + 8.094221636021315 * x17 + 0.0 * x18 + 2.8881319282901976 * x19 + 0.0 * x20 + 2.6341584369601527 * x21 + 2.937036112596955 * x22 + 2.8619210651437013 * x23 + 6.543086694364908 * x24 + 2.039232806255878 * x25 + 0.0 * x26 + 0.0 * x27 + 3.0644694003673623 * x28 + 3.5302897626178904 * x29 + 1.2510262462824338 * x30 + 0.0 * x31 + 0.0 * x32 + 0.0 * x33 + 0.0 * x34 + 0.0 * x35 + 1.4326191015626255 * x36 + 2.816304033455739 * x37 + 0.0 * x38 + 4.072123822456797 * x39 + 0.0 * x40 + 1.9546907983356687 * x41 + 4.7595398507282685 * x42 + 3.1306703524909016 * x43 + 3.588086445339696 * x44 + 2.833987701348448 * x45 + 2.007713559703375 * x46 + 0.0 * x47 + 4.322442042290693 * x48 + 2.531555024981905 * x49 + 4.59205425187626 * x50 + 2.8345729614445063 * x51 + 0.0 * x52 + 1.2102546517926531 * x53 + 2.854433248793501 * x54 + 0.0 * x55 + 4.648494275725329 * x56 + 2.449547061885512 * x57 + 2.755107852872638 * x58 + 4.287469758194033 * x59 + 0.0 * x60 + 3.2826519508177703 * x61 + 3.0258038480440623 * x62 + 3.649747498206984 * x63 + 2.321071177311014 * x64 + 0.0 * x65 + 1.7769965596556114 * x66 + 2.655482794014694 * x67 + 1.7769965596556114 * x68 + 2.655482794014694 * x69 + 0.2284514023092222 * x70 + 4.436082836802113 * x71 + 3.700852070538682 * x72 + 3.6326893520496912 * x73 + 4.141065205030546 * x74 + 3.506803146992349 * x75 + 0.8446657956093508 * x76 + 0.0 * x77 + 0.0 * x78 + 4.43222943635711 * x79 + 0.0 * x80 + 2.783104804588956 * x81 + 4.701965751446906 * x82 + 3.951115753018913 * x83 + 2.928464541395606 * x84 + 3.0042176946400025 * x85 + 4.18231615039714 * x86 + 5.628585215259215 * x87 + 3.0358774043381573 * x88 + 4.046098791225793 * x89 + 0.0 * x90 + 0.2389291701427929 * x91 + 4.066655994523826 * x92 + 4.235860656748667 * x93 + 2.59058470754541 * x94 + 0.0 * x95 + 4.985229970336824 * x96 + 4.490655817973619 * x97 + 4.648691554859533 * x98 + 2.0430195867108734 * x99 == b1)
model.addCons(0.0 * x100 + 2.670956664092703 * x101 + 2.597236244333599 * x102 + 2.77216635609335 * x103 + 0.6297124403331866 * x104 + 0.0 * x105 + 0.0 * x106 + 0.0 * x107 + 5.168426154032958 * x108 + 3.236185948598516 * x109 + 3.044815180594929 * x110 + 0.0 * x111 + 2.840069373940336 * x112 + 5.737823460598776 * x113 + 1.8054808233768689 * x114 + 0.0 * x115 + 2.8132566868378626 * x116 + 1.8615660133785168 * x117 + 2.2031693396534564 * x118 + 0.0 * x119 + 3.2302367376769783 * x120 + 0.0 * x121 + 2.5688000419966657 * x122 + 2.249272101180301 * x123 + 2.6706154636212576 * x124 + 2.0494175905552194 * x125 + 5.082014094116544 * x126 + 0.0 * x127 + 3.768822501818498 * x128 + 4.132593379673282 * x129 + 0.0 * x130 + 4.101851321593583 * x131 + 3.021505289753605 * x132 + 3.5085284467195024 * x133 + 0.0 * x134 + 2.6411175246362184 * x135 + 5.056181994092472 * x136 + 0.0 * x137 + 3.3649349940584186 * x138 + 2.6494645942652983 * x139 + 0.252949223691238 * x140 + 0.0 * x141 + 0.0 * x142 + 3.381880089330933 * x143 + 2.367605529826621 * x144 + 3.16665031058316 * x145 + 3.395039010926742 * x146 + 2.2447374860312523 * x147 + 3.492556555034468 * x148 + 3.0356800696869346 * x149 + 3.556382261268029 * x150 + 0.0 * x151 + 2.398004258825166 * x152 + 0.0 * x153 + 3.542871709811344 * x154 + 0.0 * x155 + 2.777185932261971 * x156 + 1.9075228942943607 * x157 + 3.0368930071200526 * x158 + 3.219370148396796 * x159 + 4.741970348154374 * x160 + 3.111708349908609 * x161 + 0.6126970868412788 * x162 + 0.0 * x163 + 2.398908769238697 * x164 + 0.0 * x165 + 0.0 * x166 + 4.872315818950556 * x167 + 0.0 * x168 + 3.2211351107746684 * x169 + 0.9354071021617216 * x170 + 5.307158372404135 * x171 + 0.0 * x172 + 2.869077383866856 * x173 + 2.142423361876919 * x174 + 8.67379911413607 * x175 + 0.0 * x176 + 1.2289583558438129 * x177 + 1.8416270476639351 * x178 + 5.933237077594058 * x179 + 3.011671992035563 * x180 + 3.3959296692800502 * x181 + 0.0 * x182 + 4.904301136569897 * x183 + 1.0482882676894445 * x184 + 0.0 * x185 + 0.0 * x186 + 0.0 * x187 + 4.546739941476129 * x188 + 2.3878693934342325 * x189 + 3.863067898133305 * x190 + 4.348479852914938 * x191 + 0.7626999854408283 * x192 + 3.416014706512665 * x193 + 3.488757730492132 * x194 + 1.6167179417946411 * x195 + 1.788366277420716 * x196 + 0.0 * x197 + 3.951131712135832 * x198 + 3.188538278509751 * x199 == b2)
model.addCons(2.654092154028564 * x200 + 3.147869045275257 * x201 + 3.183420602054935 * x202 + 0.2380973315397053 * x203 + 4.651644726560525 * x204 + 3.824819034670908 * x205 + 2.297839532673565 * x206 + 3.053557949140171 * x207 + 3.4384811354346416 * x208 + 0.0 * x209 + 2.4053310231022924 * x210 + 0.0 * x211 + 0.0 * x212 + 0.0 * x213 + 2.508195091478988 * x214 + 3.4551609606932425 * x215 + 0.0 * x216 + 0.0 * x217 + 1.2163561410050538 * x218 + 0.0 * x219 + 0.0 * x220 + 0.2502691700875371 * x221 + 4.595174848186268 * x222 + 0.0 * x223 + 0.0 * x224 + 0.0 * x225 + 5.2341650056860765 * x226 + 1.5198396643575849 * x227 + 4.562252822774895 * x228 + 4.793576536214545 * x229 + 0.180559702868097 * x230 + 6.746987761532561 * x231 + 6.0404172502 * x232 + 3.111708349908609 * x233 + 2.8122983474779284 * x234 + 4.602340105847338 * x235 + 1.3087247111020113 * x236 + 4.436082836802113 * x237 + 0.20792321794898 * x238 + 0.2031337000797878 * x239 + 0.0 * x240 + 0.2516400000915806 * x241 + 1.0595529455395678 * x242 + 0.276696830176959 * x243 + 2.5877434699770507 * r0 + 0.0 * r1 + 0.0 * r2 + 0.0 * r3 + 0.0 * r4 + 0.0 * r5 + 0.0 * r6 + 0.0 * r7 + 2.40186605156892 * r8 + 3.4993735337580123 * r9 + 0.0 * r10 + 2.249272101180301 * r11 + 1.8416270476639351 * r12 + 2.398004258825166 * r13 + 2.137212169975576 * r14 + 2.777185932261971 * r15 + 3.7960712369462937 * r16 + 2.421837801837564 * r17 + 2.833987701348448 * r18 + 2.59058470754541 * r19 + 1.4326191015626255 * r20 + 4.872315818950556 * r21 + 4.741970348154374 * r22 == b3)

# Total batting score
model.addCons(0.203092719628108 * x0 + 0.4917598142509982 * x1 + 0.042592760339812 * x2 + 0.5209189837851655 * x3 + 0.6852194242289271 * x4 + 0.0 * x5 + 0.1568264389397939 * x6 + 0.0 * x7 + 0.6527560160335457 * x8 + 0.0097055493948288 * x9 + 0.0 * x10 + 0.1836351035785621 * x11 + 0.0979798639816876 * x12 + 0.0523091106530302 * x13 + 0.0 * x14 + 0.2252323589106055 * x15 + 0.4803230704354783 * x16 + 0.3225959759531102 * x17 + 0.4648819900941929 * x18 + 0.0192941601276061 * x19 + 0.401800701634486 * x20 + 0.1174174175815428 * x21 + 0.1701074617340787 * x22 + 0.184278614506829 * x23 + 0.0 * x24 + 0.2169092581371314 * x25 + 0.6181255492576094 * x26 + 0.8955292082744288 * x27 + 0.1346332297803724 * x28 + 0.2438022881513919 * x29 + 0.369414535991331 * x30 + 0.4380489893706588 * x31 + 0.5491273438226489 * x32 + 0.1995330097171423 * x33 + 0.2258964415849772 * x34 + 0.6692968850924614 * x35 + 0.2413521268892626 * x36 + 0.3614897412542626 * x37 + 0.2950977135492579 * x38 + 0.0178763985705581 * x39 + 0.8067699108803225 * x40 + 0.0 * x41 + 0.124531395136477 * x42 + 0.3179848062720092 * x43 + 0.2642769263446873 * x44 + 0.1759718007975069 * x45 + 0.1333204082785869 * x46 + 0.6235585211298902 * x47 + 0.0707863890122689 * x48 + 0.128124067152275 * x49 + 0.0 * x50 + 0.1357068214744319 * x51 + 0.3229242288387468 * x52 + 0.3549707459460074 * x53 + 0.231501257068232 * x54 + 0.3432336910276978 * x55 + 0.0 * x56 + 0.1522076785191813 * x57 + 0.010728537276113 * x58 + 0.0 * x59 + 0.2249524232965142 * x60 + 0.1705920533176972 * x61 + 0.035661966645057 * x62 + 0.2725225514986058 * x63 + 0.0 * x64 + 0.5079588955919339 * x65 + 0.0 * x66 + 0.0724143015792344 * x67 + 0.0 * x68 + 0.0724143015792344 * x69 + 0.2693338598593064 * x70 + 0.1879065193370898 * x71 + 0.3895561709624699 * x72 + 0.1302960905759395 * x73 + 0.0 * x74 + 0.0 * x75 + 0.3100915016600614 * x76 + 0.3518132780852723 * x77 + 0.4014174734110816 * x78 + 0.13731665384073 * x79 + 0.1432378540799693 * x80 + 0.2376739346276714 * x81 + 0.2559919086326586 * x82 + 0.2034345302717904 * x83 + 0.0665100059401334 * x84 + 0.0563073081284851 * x85 + 0.020489981803698 * x86 + 0.0 * x87 + 0.0815102171548106 * x88 + 0.0361613811290598 * x89 + 0.1583346251582847 * x90 + 0.6774248291547631 * x91 + 0.0981843939597485 * x92 + 0.1008191220998307 * x93 + 0.0836206386155201 * x94 + 0.5444382185239764 * x95 + 0.0410407442816509 * x96 + 0.0 * x97 + 0.0236325140801604 * x98 + 0.3618748209896505 * x99 == b4)
model.addCons(0.3759767463389897 * x100 + 0.0306080470280971 * x101 + 0.0 * x102 + 0.0 * x103 + 0.0713626560155493 * x104 + 0.0888593781738956 * x105 + 0.2049463743554317 * x106 + 0.736820229045565 * x107 + 0.0 * x108 + 0.1381952861651071 * x109 + 0.4208763032188914 * x110 + 0.6277473353982713 * x111 + 0.0 * x112 + 0.2236320550592967 * x113 + 0.0722533154085412 * x114 + 0.0 * x115 + 0.0 * x116 + 0.1658849681780219 * x117 + 0.460093599838746 * x118 + 0.7552012219474451 * x119 + 0.1701389873451532 * x120 + 0.2972345672913747 * x121 + 0.1225608635413754 * x122 + 0.3263517396688129 * x123 + 0.0277877513816488 * x124 + 0.1744034154918068 * x125 + 0.1492204194267276 * x126 + 0.104743200580199 * x127 + 0.2085140158472199 * x128 + 0.8976246445266816 * x129 + 0.420639718638935 * x130 + 0.5126419834732479 * x131 + 0.1245954338869057 * x132 + 0.1809320903308392 * x133 + 0.7406867987326958 * x134 + 0.0 * x135 + 0.0 * x136 + 0.1214415580134145 * x137 + 0.0 * x138 + 0.0 * x139 + 0.0 * x140 + 0.5419274629977734 * x141 + 0.0884670965528314 * x142 + 0.1695598151093535 * x143 + 0.1079234059697344 * x144 + 0.0 * x145 + 0.0 * x146 + 0.0410588991309987 * x147 + 0.0 * x148 + 0.1059919705738747 * x149 + 0.4226220993025301 * x150 + 0.1238033320595676 * x151 + 0.277149329636694 * x152 + 0.5328834244002337 * x153 + 0.0 * x154 + 0.1177529440554449 * x155 + 0.0433825441796881 * x156 + 0.8015912387873467 * x157 + 0.2752058178211957 * x158 + 0.0877477800046338 * x159 + 0.0778723870392878 * x160 + 0.2167413134004661 * x161 + 0.5062972398233717 * x162 + 0.1760966339708242 * x163 + 0.0119609532344584 * x164 + 0.6017500567156919 * x165 + 0.122715512024337 * x166 + 0.06892864859174 * x167 + 0.1464553701063467 * x168 + 0.244746471359139 * x169 + 0.0 * x170 + 0.1533822393903422 * x171 + 0.2609428185815113 * x172 + 0.3614175617029065 * x173 + 0.2795103997150387 * x174 + 0.0 * x175 + 0.2023360677218728 * x176 + 0.3542585742838532 * x177 + 0.0 * x178 + 0.2230480790408894 * x179 + 0.1104809099930962 * x180 + 0.0 * x181 + 0.4337831922567255 * x182 + 0.0 * x183 + 0.0 * x184 + 0.2971253634586528 * x185 + 0.3366596100753006 * x186 + 0.6251525819619682 * x187 + 0.0 * x188 + 0.0712432674271431 * x189 + 0.0 * x190 + 0.1753464771092144 * x191 + 0.0 * x192 + 0.2475113804802123 * x193 + 0.376747810397139 * x194 + 0.5073383104103049 * x195 + 0.1026571470497945 * x196 + 0.0333334559268864 * x197 + 0.0 * x198 + 0.0700306489810409 * x199 == b5)
model.addCons(0.0 * x200 + 0.1613625478670421 * x201 + 0.2169647250234618 * x202 + 0.5279319695532282 * x203 + 0.0 * x204 + 0.0 * x205 + 0.0 * x206 + 0.0 * x207 + 0.0 * x208 + 0.0931044413455412 * x209 + 0.4334526806863268 * x210 + 0.4115330648140231 * x211 + 0.1060037814697081 * x212 + 0.0210675336737868 * x213 + 0.0 * x214 + 0.0 * x215 + 0.0732436041566528 * x216 + 0.1823400871139712 * x217 + 0.0 * x218 + 0.0384558342352106 * x219 + 0.0934950824450291 * x220 + 0.0 * x221 + 0.0 * x222 + 0.1251292482319216 * x223 + 0.1025550955047106 * x224 + 0.0381853760237659 * x225 + 0.1449001236340825 * x226 + 0.0 * x227 + 0.0 * x228 + 0.0301783284235349 * x229 + 0.1503511109559585 * x230 + 0.0 * x231 + 0.0 * x232 + 0.2167413134004661 * x233 + 0.0 * x234 + 0.0848108918339435 * x235 + 0.0 * x236 + 0.1879065193370898 * x237 + 0.0 * x238 + 0.0980876829268665 * x239 + 0.166387387858424 * x240 + 0.10925059219503 * x241 + 0.0 * x242 + 0.095479727601666 * x243 + 1.0741314048554933 * r0 + 0.2249524232965142 * r1 + 0.5419274629977734 * r2 + 0.9902123149267752 * r3 + 0.4380489893706588 * r4 + 0.4115330648140231 * r5 + 0.1060037814697081 * r6 + 0.114278133889709 * r7 + 0.1899275026671207 * r8 + 0.5771630422118834 * r9 + 0.1214415580134145 * r10 + 0.3263517396688129 * r11 + 0.0 * r12 + 0.277149329636694 * r13 + 0.0 * r14 + 0.0433825441796881 * r15 + 0.1330968250248089 * r16 + 0.2080031224201208 * r17 + 0.1759718007975069 * r18 + 0.0836206386155201 * r19 + 0.2413521268892626 * r20 + 0.06892864859174 * r21 + 0.0778723870392878 * r22 == b6)

# Minimize squared difference between total batting and bowling scores
model.addCons((b1 + b2 + b3 - b4 - b5 - b6) ** 2 == b7)

# Minimize variance between player performances
model.addCons(pmean == (b1 + b2 + b3 + b4 + b5 + b6) / (v1 + v2 + v3 + rsum))

model.addCons(x0 * (0.203092719628108 - pmean) ** 2 + x1 * (3.572247062473163 - pmean) ** 2 + x2 * (4.962257083773083 - pmean) ** 2 + x3 * (1.2389280143862704 - pmean) ** 2 + x4 * (0.6852194242289271 - pmean) ** 2 + x5 * (2.137212169975576 - pmean) ** 2 + x6 * (0.1568264389397939 - pmean) ** 2 + x7 * (2.828186618772914 - pmean) ** 2 + x8 * (0.6527560160335457 - pmean) ** 2 + x9 * (2.959274334494728 - pmean) ** 2 + x10 * (4.2405921773546185 - pmean) ** 2 + x11 * (0.1836351035785621 - pmean) ** 2 + x12 * (0.0979798639816876 - pmean) ** 2 + x13 * (3.560619054805139 - pmean) ** 2 + x14 * (2.869470280602835 - pmean) ** 2 + x15 * (0.2252323589106055 - pmean) ** 2 + x16 * (4.099006266870234 - pmean) ** 2 + x17 * (8.416817611974425 - pmean) ** 2 + x18 * (0.4648819900941929 - pmean) ** 2 + x19 * (2.907426088417804 - pmean) ** 2 + x20 * (0.401800701634486 - pmean) ** 2 + x21 * (2.7515758545416955 - pmean) ** 2 + x22 * (3.1071435743310336 - pmean) ** 2 + x23 * (3.04619967965053 - pmean) ** 2 + x24 * (6.543086694364908 - pmean) ** 2 + x25 * (2.2561420643930097 - pmean) ** 2 + x26 * (0.6181255492576094 - pmean) ** 2 + x27 * (0.8955292082744288 - pmean) ** 2 + x28 * (3.1991026301477348 - pmean) ** 2 + x29 * (3.774092050769282 - pmean) ** 2 + x30 * (1.6204407822737648 - pmean) ** 2 + x31 * (0.4380489893706588 - pmean) ** 2 + x32 * (0.5491273438226489 - pmean) ** 2 + x33 * (0.1995330097171423 - pmean) ** 2 + x34 * (0.2258964415849772 - pmean) ** 2 + x35 * (0.6692968850924614 - pmean) ** 2 + x36 * (1.6739712284518882 - pmean) ** 2 + x37 * (3.177793774710002 - pmean) ** 2 + x38 * (0.2950977135492579 - pmean) ** 2 + x39 * (4.090000221027355 - pmean) ** 2 + x40 * (0.8067699108803225 - pmean) ** 2 + x41 * (1.9546907983356687 - pmean) ** 2 + x42 * (4.884071245864745 - pmean) ** 2 + x43 * (3.448655158762911 - pmean) ** 2 + x44 * (3.8523633716843833 - pmean) ** 2 + x45 * (3.009959502145955 - pmean) ** 2 + x46 * (2.141033967981962 - pmean) ** 2 + x47 * (0.6235585211298902 - pmean) ** 2 + x48 * (4.393228431302962 - pmean) ** 2 + x49 * (2.65967909213418 - pmean) ** 2 + x50 * (4.59205425187626 - pmean) ** 2 + x51 * (2.9702797829189382 - pmean) ** 2 + x52 * (0.3229242288387468 - pmean) ** 2 + x53 * (1.5652253977386605 - pmean) ** 2 + x54 * (3.085934505861733 - pmean) ** 2 + x55 * (0.3432336910276978 - pmean) ** 2 + x56 * (4.648494275725329 - pmean) ** 2 + x57 * (2.6017547404046937 - pmean) ** 2 + x58 * (2.765836390148751 - pmean) ** 2 + x59 * (4.287469758194033 - pmean) ** 2 + x60 * (0.2249524232965142 - pmean) ** 2 + x61 * (3.4532440041354673 - pmean) ** 2 + x62 * (3.0614658146891194 - pmean) ** 2 + x63 * (3.92227004970559 - pmean) ** 2 + x64 * (2.321071177311014 - pmean) ** 2 + x65 * (0.5079588955919339 - pmean) ** 2 + x66 * (1.7769965596556114 - pmean) ** 2 + x67 * (2.7278970955939283 - pmean) ** 2 + x68 * (1.7769965596556114 - pmean) ** 2 + x69 * (2.7278970955939283 - pmean) ** 2 + x70 * (0.4977852621685286 - pmean) ** 2 + x71 * (4.6239893561392025 - pmean) ** 2 + x72 * (4.090408241501152 - pmean) ** 2 + x73 * (3.762985442625631 - pmean) ** 2 + x74 * (4.141065205030546 - pmean) ** 2 + x75 * (3.506803146992349 - pmean) ** 2 + x76 * (1.1547572972694122 - pmean) ** 2 + x77 * (0.3518132780852723 - pmean) ** 2 + x78 * (0.4014174734110816 - pmean) ** 2 + x79 * (4.56954609019784 - pmean) ** 2 + x80 * (0.1432378540799693 - pmean) ** 2 + x81 * (3.0207787392166274 - pmean) ** 2 + x82 * (4.957957660079565 - pmean) ** 2 + x83 * (4.154550283290703 - pmean) ** 2 + x84 * (2.9949745473357394 - pmean) ** 2 + x85 * (3.060525002768488 - pmean) ** 2 + x86 * (4.2028061322008385 - pmean) ** 2 + x87 * (5.628585215259215 - pmean) ** 2 + x88 * (3.117387621492968 - pmean) ** 2 + x89 * (4.082260172354853 - pmean) ** 2 + x90 * (0.1583346251582847 - pmean) ** 2 + x91 * (0.916353999297556 - pmean) ** 2 + x92 * (4.164840388483574 - pmean) ** 2 + x93 * (4.336679778848498 - pmean) ** 2 + x94 * (2.6742053461609303 - pmean) ** 2 + x95 * (0.5444382185239764 - pmean) ** 2 + x96 * (5.026270714618475 - pmean) ** 2 + x97 * (4.490655817973619 - pmean) ** 2 + x98 * (4.672324068939694 - pmean) ** 2 + x99 * (2.4048944077005237 - pmean) ** 2 == p1)
model.addCons(x100 * (0.3759767463389897 - pmean) ** 2 + x101 * (2.7015647111208 - pmean) ** 2 + x102 * (2.597236244333599 - pmean) ** 2 + x103 * (2.77216635609335 - pmean) ** 2 + x104 * (0.7010750963487359 - pmean) ** 2 + x105 * (0.0888593781738956 - pmean) ** 2 + x106 * (0.2049463743554317 - pmean) ** 2 + x107 * (0.736820229045565 - pmean) ** 2 + x108 * (5.168426154032958 - pmean) ** 2 + x109 * (3.3743812347636233 - pmean) ** 2 + x110 * (3.4656914838138206 - pmean) ** 2 + x111 * (0.6277473353982713 - pmean) ** 2 + x112 * (2.840069373940336 - pmean) ** 2 + x113 * (5.961455515658073 - pmean) ** 2 + x114 * (1.87773413878541 - pmean) ** 2 + x115 * (0.0 - pmean) ** 2 + x116 * (2.8132566868378626 - pmean) ** 2 + x117 * (2.0274509815565387 - pmean) ** 2 + x118 * (2.6632629394922023 - pmean) ** 2 + x119 * (0.7552012219474451 - pmean) ** 2 + x120 * (3.4003757250221316 - pmean) ** 2 + x121 * (0.2972345672913747 - pmean) ** 2 + x122 * (2.691360905538041 - pmean) ** 2 + x123 * (2.575623840849114 - pmean) ** 2 + x124 * (2.6984032150029065 - pmean) ** 2 + x125 * (2.223821006047026 - pmean) ** 2 + x126 * (5.231234513543272 - pmean) ** 2 + x127 * (0.104743200580199 - pmean) ** 2 + x128 * (3.977336517665718 - pmean) ** 2 + x129 * (5.0302180241999634 - pmean) ** 2 + x130 * (0.420639718638935 - pmean) ** 2 + x131 * (4.614493305066831 - pmean) ** 2 + x132 * (3.1461007236405107 - pmean) ** 2 + x133 * (3.6894605370503415 - pmean) ** 2 + x134 * (0.7406867987326958 - pmean) ** 2 + x135 * (2.6411175246362184 - pmean) ** 2 + x136 * (5.056181994092472 - pmean) ** 2 + x137 * (0.1214415580134145 - pmean) ** 2 + x138 * (3.3649349940584186 - pmean) ** 2 + x139 * (2.6494645942652983 - pmean) ** 2 + x140 * (0.252949223691238 - pmean) ** 2 + x141 * (0.5419274629977734 - pmean) ** 2 + x142 * (0.0884670965528314 - pmean) ** 2 + x143 * (3.5514399044402865 - pmean) ** 2 + x144 * (2.4755289357963552 - pmean) ** 2 + x145 * (3.16665031058316 - pmean) ** 2 + x146 * (3.395039010926742 - pmean) ** 2 + x147 * (2.285796385162251 - pmean) ** 2 + x148 * (3.492556555034468 - pmean) ** 2 + x149 * (3.141672040260809 - pmean) ** 2 + x150 * (3.9790043605705594 - pmean) ** 2 + x151 * (0.1238033320595676 - pmean) ** 2 + x152 * (2.67515358846186 - pmean) ** 2 + x153 * (0.5328834244002337 - pmean) ** 2 + x154 * (3.542871709811344 - pmean) ** 2 + x155 * (0.1177529440554449 - pmean) ** 2 + x156 * (2.820568476441659 - pmean) ** 2 + x157 * (2.7091141330817075 - pmean) ** 2 + x158 * (3.3120988249412484 - pmean) ** 2 + x159 * (3.30711792840143 - pmean) ** 2 + x160 * (4.819842735193662 - pmean) ** 2 + x161 * (3.328449663309075 - pmean) ** 2 + x162 * (1.1189943266646505 - pmean) ** 2 + x163 * (0.1760966339708242 - pmean) ** 2 + x164 * (2.410869722473155 - pmean) ** 2 + x165 * (0.6017500567156919 - pmean) ** 2 + x166 * (0.122715512024337 - pmean) ** 2 + x167 * (4.941244467542296 - pmean) ** 2 + x168 * (0.1464553701063467 - pmean) ** 2 + x169 * (3.4658815821338074 - pmean) ** 2 + x170 * (0.9354071021617216 - pmean) ** 2 + x171 * (5.460540611794477 - pmean) ** 2 + x172 * (0.2609428185815113 - pmean) ** 2 + x173 * (3.2304949455697622 - pmean) ** 2 + x174 * (2.4219337615919576 - pmean) ** 2 + x175 * (8.67379911413607 - pmean) ** 2 + x176 * (0.2023360677218728 - pmean) ** 2 + x177 * (1.5832169301276662 - pmean) ** 2 + x178 * (1.8416270476639351 - pmean) ** 2 + x179 * (6.156285156634948 - pmean) ** 2 + x180 * (3.122152902028659 - pmean) ** 2 + x181 * (3.3959296692800502 - pmean) ** 2 + x182 * (0.4337831922567255 - pmean) ** 2 + x183 * (4.904301136569897 - pmean) ** 2 + x184 * (1.0482882676894445 - pmean) ** 2 + x185 * (0.2971253634586528 - pmean) ** 2 + x186 * (0.3366596100753006 - pmean) ** 2 + x187 * (0.6251525819619682 - pmean) ** 2 + x188 * (4.546739941476129 - pmean) ** 2 + x189 * (2.4591126608613756 - pmean) ** 2 + x190 * (3.863067898133305 - pmean) ** 2 + x191 * (4.523826330024153 - pmean) ** 2 + x192 * (0.7626999854408283 - pmean) ** 2 + x193 * (3.6635260869928774 - pmean) ** 2 + x194 * (3.865505540889271 - pmean) ** 2 + x195 * (2.124056252204946 - pmean) ** 2 + x196 * (1.8910234244705106 - pmean) ** 2 + x197 * (0.0333334559268864 - pmean) ** 2 + x198 * (3.951131712135832 - pmean) ** 2 + x199 * (3.258568927490792 - pmean) ** 2 == p2)
model.addCons(x200 * (2.654092154028564 - pmean) ** 2 + x201 * (3.309231593142299 - pmean) ** 2 + x202 * (3.400385327078397 - pmean) ** 2 + x203 * (0.7660293010929335 - pmean) ** 2 + x204 * (4.651644726560525 - pmean) ** 2 + x205 * (3.824819034670908 - pmean) ** 2 + x206 * (2.297839532673565 - pmean) ** 2 + x207 * (3.053557949140171 - pmean) ** 2 + x208 * (3.4384811354346416 - pmean) ** 2 + x209 * (0.0931044413455412 - pmean) ** 2 + x210 * (2.838783703788619 - pmean) ** 2 + x211 * (0.4115330648140231 - pmean) ** 2 + x212 * (0.1060037814697081 - pmean) ** 2 + x213 * (0.0210675336737868 - pmean) ** 2 + x214 * (2.508195091478988 - pmean) ** 2 + x215 * (3.4551609606932425 - pmean) ** 2 + x216 * (0.0732436041566528 - pmean) ** 2 + x217 * (0.1823400871139712 - pmean) ** 2 + x218 * (1.2163561410050538 - pmean) ** 2 + x219 * (0.0384558342352106 - pmean) ** 2 + x220 * (0.0934950824450291 - pmean) ** 2 + x221 * (0.2502691700875371 - pmean) ** 2 + x222 * (4.595174848186268 - pmean) ** 2 + x223 * (0.1251292482319216 - pmean) ** 2 + x224 * (0.1025550955047106 - pmean) ** 2 + x225 * (0.0381853760237659 - pmean) ** 2 + x226 * (5.379065129320159 - pmean) ** 2 + x227 * (1.5198396643575849 - pmean) ** 2 + x228 * (4.562252822774895 - pmean) ** 2 + x229 * (4.8237548646380795 - pmean) ** 2 + x230 * (0.3309108138240555 - pmean) ** 2 + x231 * (6.746987761532561 - pmean) ** 2 + x232 * (6.0404172502 - pmean) ** 2 + x233 * (3.328449663309075 - pmean) ** 2 + x234 * (2.8122983474779284 - pmean) ** 2 + x235 * (4.6871509976812815 - pmean) ** 2 + x236 * (1.3087247111020113 - pmean) ** 2 + x237 * (4.6239893561392025 - pmean) ** 2 + x238 * (0.20792321794898 - pmean) ** 2 + x239 * (0.3012213830066543 - pmean) ** 2 + x240 * (0.166387387858424 - pmean) ** 2 + x241 * (0.3608905922866106 - pmean) ** 2 + x242 * (1.0595529455395678 - pmean) ** 2 + x243 * (0.372176557778625 - pmean) ** 2 + r0 * (3.6618748748325443 - pmean) ** 2 + r1 * (0.2249524232965142 - pmean) ** 2 + r2 * (0.5419274629977734 - pmean) ** 2 + r3 * (0.9902123149267752 - pmean) ** 2 + r4 * (0.4380489893706588 - pmean) ** 2 + r5 * (0.4115330648140231 - pmean) ** 2 + r6 * (0.1060037814697081 - pmean) ** 2 + r7 * (0.114278133889709 - pmean) ** 2 + r8 * (2.5917935542360406 - pmean) ** 2 + r9 * (4.076536575969896 - pmean) ** 2 + r10 * (0.1214415580134145 - pmean) ** 2 + r11 * (2.575623840849114 - pmean) ** 2 + r12 * (1.8416270476639351 - pmean) ** 2 + r13 * (2.67515358846186 - pmean) ** 2 + r14 * (2.137212169975576 - pmean) ** 2 + r15 * (2.820568476441659 - pmean) ** 2 + r16 * (3.9291680619711027 - pmean) ** 2 + r17 * (2.629840924257685 - pmean) ** 2 + r18 * (3.009959502145955 - pmean) ** 2 + r19 * (2.6742053461609303 - pmean) ** 2 + r20 * (1.6739712284518882 - pmean) ** 2 + r21 * (4.941244467542296 - pmean) ** 2 + r22 * (4.819842735193662 - pmean) ** 2 == p3)

model.addCons(variance == (p1 + p2 + p3) / (v1 + v2 + v3 + rsum))

c1 = c2 = c3 = 1

objective = (
    c1 * (b1 + b2 + b3 + b4 + b5 + b6) - c2 * b7 - c3 * variance
)

# Set the objective in the model
model.setObjective(objective, sense="maximize")
model.setRealParam("limits/gap", 0.05)

# Solve the problem
model.optimize()

vals = [model.getVal(x0), model.getVal(x1), model.getVal(x2), model.getVal(x3), model.getVal(x4), model.getVal(x5), model.getVal(x6), model.getVal(x7), model.getVal(x8), model.getVal(x9), model.getVal(x10), model.getVal(x11), model.getVal(x12), model.getVal(x13), model.getVal(x14), model.getVal(x15), model.getVal(x16), model.getVal(x17), model.getVal(x18), model.getVal(x19), model.getVal(x20), model.getVal(x21), model.getVal(x22), model.getVal(x23), model.getVal(x24), model.getVal(x25), model.getVal(x26), model.getVal(x27), model.getVal(x28), model.getVal(x29), model.getVal(x30), model.getVal(x31), model.getVal(x32), model.getVal(x33), model.getVal(x34), model.getVal(x35), model.getVal(x36), model.getVal(x37), model.getVal(x38), model.getVal(x39), model.getVal(x40), model.getVal(x41), model.getVal(x42), model.getVal(x43), model.getVal(x44), model.getVal(x45), model.getVal(x46), model.getVal(x47), model.getVal(x48), model.getVal(x49), model.getVal(x50), model.getVal(x51), model.getVal(x52), model.getVal(x53), model.getVal(x54), model.getVal(x55), model.getVal(x56), model.getVal(x57), model.getVal(x58), model.getVal(x59), model.getVal(x60), model.getVal(x61), model.getVal(x62), model.getVal(x63), model.getVal(x64), model.getVal(x65), model.getVal(x66), model.getVal(x67), model.getVal(x68), model.getVal(x69), model.getVal(x70), model.getVal(x71), model.getVal(x72), model.getVal(x73), model.getVal(x74), model.getVal(x75), model.getVal(x76), model.getVal(x77), model.getVal(x78), model.getVal(x79), model.getVal(x80), model.getVal(x81), model.getVal(x82), model.getVal(x83), model.getVal(x84), model.getVal(x85), model.getVal(x86), model.getVal(x87), model.getVal(x88), model.getVal(x89), model.getVal(x90), model.getVal(x91), model.getVal(x92), model.getVal(x93), model.getVal(x94), model.getVal(x95), model.getVal(x96), model.getVal(x97), model.getVal(x98), model.getVal(x99), model.getVal(x100), model.getVal(x101), model.getVal(x102), model.getVal(x103), model.getVal(x104), model.getVal(x105), model.getVal(x106), model.getVal(x107), model.getVal(x108), model.getVal(x109), model.getVal(x110), model.getVal(x111), model.getVal(x112), model.getVal(x113), model.getVal(x114), model.getVal(x115), model.getVal(x116), model.getVal(x117), model.getVal(x118), model.getVal(x119), model.getVal(x120), model.getVal(x121), model.getVal(x122), model.getVal(x123), model.getVal(x124), model.getVal(x125), model.getVal(x126), model.getVal(x127), model.getVal(x128), model.getVal(x129), model.getVal(x130), model.getVal(x131), model.getVal(x132), model.getVal(x133), model.getVal(x134), model.getVal(x135), model.getVal(x136), model.getVal(x137), model.getVal(x138), model.getVal(x139), model.getVal(x140), model.getVal(x141), model.getVal(x142), model.getVal(x143), model.getVal(x144), model.getVal(x145), model.getVal(x146), model.getVal(x147), model.getVal(x148), model.getVal(x149), model.getVal(x150), model.getVal(x151), model.getVal(x152), model.getVal(x153), model.getVal(x154), model.getVal(x155), model.getVal(x156), model.getVal(x157), model.getVal(x158), model.getVal(x159), model.getVal(x160), model.getVal(x161), model.getVal(x162), model.getVal(x163), model.getVal(x164), model.getVal(x165), model.getVal(x166), model.getVal(x167), model.getVal(x168), model.getVal(x169), model.getVal(x170), model.getVal(x171), model.getVal(x172), model.getVal(x173), model.getVal(x174), model.getVal(x175), model.getVal(x176), model.getVal(x177), model.getVal(x178), model.getVal(x179), model.getVal(x180), model.getVal(x181), model.getVal(x182), model.getVal(x183), model.getVal(x184), model.getVal(x185), model.getVal(x186), model.getVal(x187), model.getVal(x188), model.getVal(x189), model.getVal(x190), model.getVal(x191), model.getVal(x192), model.getVal(x193), model.getVal(x194), model.getVal(x195), model.getVal(x196), model.getVal(x197), model.getVal(x198), model.getVal(x199), model.getVal(x200), model.getVal(x201), model.getVal(x202), model.getVal(x203), model.getVal(x204), model.getVal(x205), model.getVal(x206), model.getVal(x207), model.getVal(x208), model.getVal(x209), model.getVal(x210), model.getVal(x211), model.getVal(x212), model.getVal(x213), model.getVal(x214), model.getVal(x215), model.getVal(x216), model.getVal(x217), model.getVal(x218), model.getVal(x219), model.getVal(x220), model.getVal(x221), model.getVal(x222), model.getVal(x223), model.getVal(x224), model.getVal(x225), model.getVal(x226), model.getVal(x227), model.getVal(x228), model.getVal(x229), model.getVal(x230), model.getVal(x231), model.getVal(x232), model.getVal(x233), model.getVal(x234), model.getVal(x235), model.getVal(x236), model.getVal(x237), model.getVal(x238), model.getVal(x239), model.getVal(x240), model.getVal(x241), model.getVal(x242), model.getVal(x243)]
retained = [model.getVal(r0), model.getVal(r1), model.getVal(r2), model.getVal(r3), model.getVal(r4), model.getVal(r5), model.getVal(r6), model.getVal(r7), model.getVal(r8), model.getVal(r9), model.getVal(r10), model.getVal(r11), model.getVal(r12), model.getVal(r13), model.getVal(r14), model.getVal(r15), model.getVal(r16), model.getVal(r17), model.getVal(r18), model.getVal(r19), model.getVal(r20), model.getVal(r21), model.getVal(r22)]

df = pd.read_csv("final.csv")
player_names = []

for ind, val in enumerate(vals):
    if val == 1:
        player_names.append(df['Player'][ind])

retained_df = pd.read_csv("retained_players_final.csv")
retained_player_names = []

for ind, val in enumerate(retained):
    if val == 1:
        retained_player_names.append(retained_df['Player'][ind])

with open("player_names.txt", "w") as f:
    f.write("Bought players:\n")
    f.write("\n".join(player_names))
    f.write("\n\nRetained players:\n")

    if retained_player_names:
        f.write("\n".join(retained_player_names))
    else:
        f.write("No players retained.")